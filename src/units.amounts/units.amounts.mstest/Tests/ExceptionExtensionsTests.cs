// <auto-generated>
// This .cs file is generated by T4 template. Changes should be made by editing the .tt file.
// </auto-generated>

using System.Runtime.InteropServices;
using cc.isr.UnitsAmounts.ExceptionExtensions;

#nullable enable

namespace cc.isr.UnitsAmounts.Tests;

/// <summary>
/// Tests internal exception extension methods for adding exception data.
/// </summary>
[TestClass]
public class ExceptionExtensionsTests
{
    /// <summary> Initializes the test class instance before each test runs. </summary>
    /// <remarks> David, 2020-09-18. </remarks>
    [TestInitialize()]
    public void InitializeBeforeEachTest()
    {
        Console.WriteLine( $"{this.TestContext?.FullyQualifiedTestClassName}: {DateTime.Now} {System.TimeZoneInfo.Local}" );
    }

    /// <summary>
    /// Gets or sets the test context which provides information about and functionality for the
    /// current test run.
    /// </summary>
    /// <value> The test context. </value>
    public TestContext? TestContext { get; set; }


    /// <summary>   <see cref"ExternalException"/> data should add. </summary>
    /// <remarks>   2025-09-06. </remarks>
    [TestMethod]
    public void ExternalExceptionDataShouldAdd()
    {
        Exception exception = new ExternalException();
        Assert.IsTrue( ExceptionDataMethods.AddExceptionData( exception, exception as ExternalException ),
                       $"{nameof(ExternalException)} exception data should be added");
    }

    /// <summary>   <see cref"ArgumentOutOfRangeException"/> data should add. </summary>
    /// <remarks>   2025-09-06. </remarks>
    [TestMethod]
    public void ArgumentOutOfRangeExceptionDataShouldAdd()
    {
        Exception exception = new ArgumentOutOfRangeException();
        Assert.IsTrue( ExceptionDataMethods.AddExceptionData( exception, exception as ArgumentOutOfRangeException ),
                       $"{nameof(ArgumentOutOfRangeException)} exception data should be added");
    }

    /// <summary>   <see cref"ArgumentException"/> data should add. </summary>
    /// <remarks>   2025-09-06. </remarks>
    [TestMethod]
    public void ArgumentExceptionDataShouldAdd()
    {
        Exception exception = new ArgumentException();
        Assert.IsTrue( ExceptionDataMethods.AddExceptionData( exception, exception as ArgumentException ),
                       $"{nameof(ArgumentException)} exception data should be added");
    }

    /// <summary>   <see cref"UnitConversionException"/> data should add. </summary>
    /// <remarks>   2025-09-06. </remarks>
    [TestMethod]
    public void UnitConversionExceptionDataShouldAdd()
    {
        Exception exception = new UnitConversionException( ElectricUnits.Ampere, ElectricUnits.Coulomb );
        Assert.IsTrue( ExceptionDataMethods.AddExceptionData( exception, exception as UnitConversionException ),
                       $"{nameof(UnitConversionException)} exception data should be added");
    }

    /// <summary>   <see cref"UnknownUnitException"/> data should add. </summary>
    /// <remarks>   2025-09-06. </remarks>
    [TestMethod]
    public void UnknownUnitExceptionDataShouldAdd()
    {
        Exception exception = new UnknownUnitException( ElectricUnits.Ampere.ToString(), ElectricUnits.Ampere.ToString() );
        Assert.IsTrue( ExceptionDataMethods.AddExceptionData( exception, exception as UnknownUnitException ),
                       $"{nameof(UnknownUnitException)} exception data should be added");
    }
}

