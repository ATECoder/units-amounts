        [TestMethod()]
        public void AmountBinaryFormatterSerializationTest()
        {
            Amount a = new Amount(3500.12, EnergyUnits.KilowattHour * (365.0 * TimeUnits.Day) / VolumeUnits.CubicMeter);

            // Serialize instance:
            using MemoryStream stream = new MemoryStream();
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Serialize( stream, a );

            // Deserialize instance:
            stream.Position = 0;
            Amount b = ( Amount ) formatter.Deserialize( stream );

            // Compare:
            Console.WriteLine( a );
            Console.WriteLine( b );
            Assert.AreEqual( a, b );
        }

        [TestMethod()]
        public void AmountSoapFormatterSerializationTest()
        {
            Amount a = new Amount(3500.12, EnergyUnits.KilowattHour * (365.0 * TimeUnits.Day) / VolumeUnits.CubicMeter);

            // Serialize instance:
            using MemoryStream stream = new MemoryStream();
            SoapFormatter formatter = new SoapFormatter();
            formatter.Serialize( stream, a );

            // Deserialize instance:
            stream.Position = 0;
            Amount b = ( Amount ) formatter.Deserialize( stream );

            // Show serialization (this closes the stream):
            stream.Position = 0;
            Console.WriteLine( stream.ToXmlString() );
            Console.WriteLine();

            // Compare:
            Console.WriteLine( a );
            Console.WriteLine( b );
            Assert.AreEqual( a, b );
        }

        [TestMethod()]
        public void AmountNetDataContractSerializerSerializationTest()
        {
            Amount a = new Amount(3500.12, EnergyUnits.KilowattHour * (365.0 * TimeUnits.Day) / VolumeUnits.CubicMeter);

            // Serialize instance:
            using MemoryStream stream = new MemoryStream();
            NetDataContractSerializer serializer = new NetDataContractSerializer();
            serializer.Serialize( stream, a );

            // Deserialize instance:
            stream.Position = 0;
            Amount b = ( Amount ) serializer.Deserialize( stream );

            // Show serialization (this closes the stream):
            stream.Position = 0;
            Console.WriteLine( stream.ToXmlString() );
            Console.WriteLine();

            // Compare:
            Console.WriteLine( a );
            Console.WriteLine( b );
            Assert.AreEqual( a, b );
        }

        [TestMethod()]
        public void AmountArrayNetDataContractSerializerSerializationTest()
        {
            Amount[] aa = new Amount[6];
            aa[0] = new Amount(32.5, LengthUnits.NauticalMile);
            aa[1] = new Amount(3500.12, EnergyUnits.KilowattHour * (365.0 * TimeUnits.Day) / VolumeUnits.CubicMeter);
            aa[2] = 3 * aa[0];
            aa[3] = 3 * aa[1];
            aa[4] = aa[1] / aa[3];
            aa[5] = new Amount(42.3, LengthUnits.Meter / TimeUnits.Second.Power(2));

            // Serialize instance:
            using MemoryStream stream = new MemoryStream();
            NetDataContractSerializer serializer = new NetDataContractSerializer();
            serializer.WriteObject( stream, aa );

            // Deserialize instance:
            stream.Position = 0;
            Amount[] ba = ( Amount[] ) serializer.ReadObject( stream );

            // Show serialization (this closes the stream):
            stream.Position = 0;
            Console.WriteLine( stream.ToXmlString() );
            Console.WriteLine();

            // Compare:
            Assert.AreEqual( aa.Length, ba.Length );
            for ( int i = 0; i < aa.Length; i++ )
            {
                Console.WriteLine( aa[i] );
                Console.WriteLine( ba[i] );
                Assert.AreEqual( aa[i], ba[i] );
            }
        }

        [TestMethod()]
        public void SerializeDeserialize01Test()
        {
            // Make some amounts:
            Amount a1before = new Amount(12345.6789, LengthUnits.Meter);
            Amount a2before = new Amount(-0.45, LengthUnits.Kilometer / TimeUnits.Hour);

            using MemoryStream buffer = new MemoryStream();
            // Serialize the units:
            BinaryFormatter f = new BinaryFormatter();
            f.Serialize( buffer, a1before );
            f.Serialize( buffer, a2before );

            // Reset stream:
            _ = buffer.Seek( 0, SeekOrigin.Begin );

            // Deserialize units:
            BinaryFormatter g = new BinaryFormatter();
            Amount a1after = ( Amount ) g.Deserialize( buffer );
            Amount a2after = ( Amount ) g.Deserialize( buffer );

            Console.WriteLine( "{0} => {1}", a1before, a1after );
            Console.WriteLine( "{0} => {1}", a2before, a2after );

            Assert.AreEqual( a1before, a1after );
            Assert.AreEqual( a2before, a2after );

        }

