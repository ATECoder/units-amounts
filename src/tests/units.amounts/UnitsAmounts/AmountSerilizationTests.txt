using System;
using System.IO;
using System.Runtime.Serialization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Arebis.StandardUnits;
using System.Runtime.Serialization.Formatters.Binary;

namespace Arebis.UnitsAmounts.MSTest
{

    /// <summary>   Contains unit tests for Amount Serialization. </summary>
    /// <license> (c) 2013 Rudi Breedenraedt. All rights reserved.<para>
    /// Licensed under The MIT License.</para><para>
    /// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
    /// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    /// NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    /// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    /// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</para>
    /// </license>
    /// <remarks> Requires the Grammophone.Serialization package.</remarks>
    /// <history date="2018-01-27" by="David" revision="1.0.5814.0"> Fixed. </history>
    [TestClass()]
    public class AmountSerilizationTests
    {

        #region " Initialize & cleanup "

        private UnitManager _DefaultUnitManager;

        [TestInitialize()]
        public void MyTestInitialize()
        {
            Console.Write( "Resetting the Unit Manager instance..." );
            this._DefaultUnitManager = UnitManager.Instance;
            UnitManager.Instance = new UnitManager();
            UnitManager.RegisterByAssembly( typeof( LengthUnits ).Assembly );
            Console.WriteLine( " done." );
        }

        [TestCleanup()]
        public void MyTestCleanup()
        {
            UnitManager.Instance = this._DefaultUnitManager;
        }

        #endregion Initialize & cleanup

        /// <summary>   Asserts should serialize. </summary>
        /// <remarks>   David, 2022-01-31. </remarks>
        /// <param name="stream">       The stream. </param>
        /// <param name="formatter">    The formatter. </param>
        private static void AssertShouldSerialize( Stream stream, IFormatter formatter )
        {

            // Make some amounts:
            var a1before = new Amount( 12345.6789, LengthUnits.Meter );
            var a2before = new Amount( -0.45, LengthUnits.Kilometer / TimeUnits.Hour );

#pragma warning disable SYSLIB0011 // Type or member is obsolete
            // Serialize the units:
            formatter.Serialize( stream, a1before );
            formatter.Serialize( stream, a2before );

            // Reset stream:
            _ = stream.Seek( 0, SeekOrigin.Begin );

            // Deserialize units:
            Amount a1after = ( Amount ) formatter.Deserialize( stream );
            Amount a2after = ( Amount ) formatter.Deserialize( stream );
#pragma warning restore SYSLIB0011 // Type or member is obsolete

            stream.Close();
            Console.WriteLine( "{0} => {1}", a1before, a1after );
            Console.WriteLine( "{0} => {1}", a2before, a2after );

            Assert.AreEqual( a1before, a1after );
            Assert.AreEqual( a2before, a2after );

        }

        /// <summary>   (Unit Test Method) should serialize using binary formatter. </summary>
        /// <remarks>   David, 2022-01-31. </remarks>
        [TestMethod()]
        public void ShouldSerializeUsingBinaryFormatter()
        {
            using var memoryStream = new MemoryStream();
            IFormatter formatter = new BinaryFormatter();
            AmountSerilizationTests.AssertShouldSerialize( memoryStream, formatter );
        }

        /// <summary>   (Unit Test Method) should serialize using fast binary formatter. </summary>
        /// <remarks>   David, 2022-01-31. </remarks>
        [TestMethod()]
        public void ShouldSerializeUsingFastBinaryFormatter()
        {
            using var memoryStream = new MemoryStream();
            IFormatter formatter = new Grammophone.Serialization.FastBinaryFormatter();
            AmountSerilizationTests.AssertShouldSerialize( memoryStream, formatter );
        }

        /// <summary>   (Unit Test Method) should serialize array. </summary>
        /// <remarks>   David, 2022-01-31. </remarks>
        [TestMethod()]
        public void ShouldSerializeArray()
        {
            // Serialize instance:
            using MemoryStream stream = new();
            var formatter = new Grammophone.Serialization.FastBinaryFormatter();

            Amount[] amounts = new Amount[6];
            amounts[0] = new Amount( 32.5, LengthUnits.NauticalMile );
            amounts[1] = new Amount( 3500.12, EnergyUnits.KilowattHour * (365.0 * TimeUnits.Day) / VolumeUnits.CubicMeter );
            amounts[2] = 3 * amounts[0];
            amounts[3] = 3 * amounts[1];
            amounts[4] = amounts[1] / amounts[3];
            amounts[5] = new Amount( 42.3, LengthUnits.Meter / TimeUnits.Second.Power( 2 ) );

            formatter.Serialize( stream, amounts );

            // Deserialize instance:
            stream.Position = 0;
            Amount[] ba = ( Amount[] ) formatter.Deserialize( stream );

            // Compare:
            Assert.AreEqual( amounts.Length, ba.Length );
            for ( int i = 0; i < amounts.Length; i++ )
            {
                Console.WriteLine( amounts[i] );
                Console.WriteLine( ba[i] );
                Assert.AreEqual( amounts[i], ba[i] );
            }
        }
    }

}
